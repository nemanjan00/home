---
version: "3.5"
services:

  # Watchtower for automated updates
  watchtower:
    image: containrrr/watchtower
    scale: 0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

    networks:
      - home

  # Pihole for ad blocking
  pihole:
    image: pihole/pihole:2024.02.0
    scale: 0
    environment:
      TZ: 'Europe/Belgrade'
      WEBPASSWORD: fU1HRlMxGy9oNlkPxYSc
      VIRTUAL_HOST: pihole.local
    volumes:
      - ./data/pihole/etc/pihole:/etc/pihole
      - ./data/pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/
      - ./pihole-FTL.conf:/etc/pihole/pihole-FTL.conf
      - ./data/pihole/etc/dnsmasq:/etc/dnsmasq

    restart: unless-stopped

    dns:
      - 1.1.1.1
      - 8.8.8.8

    networks:
      home:
        ipv4_address: 10.5.0.200

    labels:
      - "traefik.enable=true"

      - "traefik.http.services.pihole.loadbalancer.server.port=80"

      - "traefik.http.middlewares.pihole-prefix.addprefix.prefix=/admin"

      - "traefik.http.routers.pihole.service=pihole"
      - "traefik.http.routers.pihole.rule=Host(`pihole.local`)"
      - "traefik.http.routers.pihole.middlewares=pihole-prefix"

  # CoreDNS for custom DNS records
  coredns:
    image: coredns/coredns
    command: -conf /data/Main
    ports:
      - 53:53/udp
    volumes:
      - ./coredns/config:/data

    restart: unless-stopped

    networks:
      - home

  # Traefik for exposing web services
  reverse-proxy:
    image: traefik:v2.4
    #command: --api.insecure=true --providers.docker /etc/traefik
    #command: --api.insecure=true --providers.docker
    ports:
      - "10.25.0.15:80:80"
      - "10.25.0.15:8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik:/etc/traefik

    restart: unless-stopped

    networks:
      - home

  # ZNC
  znc:
    image: znc

    scale: 0

    restart: unless-stopped

    networks:
      - home

    volumes:
      - ./data/znc:/znc-data

    ports:
      - 6667:6667

    labels:
      - "traefik.enable=true"

      - "traefik.http.services.znc.loadbalancer.server.port=6667"

      - "traefik.http.routers.znc.service=znc"
      - "traefik.http.routers.znc.rule=Host(`znc.local`)"

  nextcloud:
    image: nextcloud:30
    environment:
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=nextcloud
      - POSTGRES_HOST=nextcloud-postgres

    labels:
      - "traefik.enable=true"

      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"

      - "traefik.http.routers.nextcloud.service=nextcloud"
      - "traefik.http.routers.nextcloud.rule=Host(`nextcloud.local`)"

    restart: unless-stopped

    networks:
      - home

    volumes:
      #- ./data/nextcloud/data:/var/www/html
      - ~/storage/nextcloud/data:/var/www/html

    ports:
      - 1345:80

  nextcloud-postgres:
    image: postgres:13
    restart: always
    environment:
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=nextcloud
      - POSTGRES_DB=nextcloud
      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.local,10.24.254.1:1345,10.24.254.1

    networks:
      - home

    volumes:
      - ./data/nextcloud/postgres:/var/lib/postgresql/data

  # Gitea for local git storage
  gitea:
    image: gitea/gitea:1.14.2
    scale: 0
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=gitea-postgres:5432
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=gitea
      - GITEA__database__PASSWD=gitea

    labels:
      - "traefik.enable=true"

      - "traefik.http.services.gitea.loadbalancer.server.port=3000"

      - "traefik.http.routers.gitea.service=gitea"
      - "traefik.http.routers.gitea.rule=Host(`gitea.local`)"

    restart: unless-stopped

    networks:
      - home

    volumes:
      - ./data/gitea/git:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

    ports:
      - "2222:22"

  gitea-postgres:
    image: postgres:13
    scale: 0
    restart: always
    environment:
      - POSTGRES_USER=gitea
      - POSTGRES_PASSWORD=gitea
      - POSTGRES_DB=gitea

    networks:
      - home

    volumes:
      - ./data/gitea/postgres:/var/lib/postgresql/data

  # Plex
  plex:
    image: ghcr.io/linuxserver/plex
    container_name: plex
    environment:
      - PUID=1000
      - PGID=1000
      - VERSION=docker
    volumes:
      - ./data/plex/config:/config
      - ~/svadba:/svadba
      - ~/storage/TVShows:/tv
      - ~/storage/Movies:/movies
      - ~/storage/Video:/Video
      - ~/storage/Pics:/Pics
      - ~/storage/drone1:/drone1
      - ~/storage/camera1:/camera1
      - ~/storage/camera2:/camera2
      - ~/storage/drone2:/drone2
      - ~/storage/bledilf:/bled
      - ~/storage/fpv/new:/fpv
    networks:
      - home
    privileged: true
    restart: unless-stopped
    ports:
      - 32400:32400
    #network_mode: host

    labels:
      - "traefik.enable=true"

      - "traefik.http.services.plex.loadbalancer.server.port=32400"

      #- "traefik.http.middlewares.plex-prefix.addprefix.prefix=/web"

      - "traefik.http.routers.plex.service=plex"
      - "traefik.http.routers.plex.rule=Host(`plex.local`)"
      #- "traefik.http.routers.plex.middlewares=plex-prefix"

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    scale: 0
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    networks:
      - home
    volumes:
      - ./data/jellyfin/config:/config
      - ~/storage/TVShows:/data/tvshows
      - ~/storage/Movies:/data/movies
    restart: unless-stopped

    labels:
      - "traefik.enable=true"

      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"

      #- "traefik.http.middlewares.plex-prefix.addprefix.prefix=/web"

      - "traefik.http.routers.jellyfin.service=jellyfin"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.local`)"
      #- "traefik.http.routers.jellyfin.middlewares=plex-prefix"

  # Etesync
  etesync:
    image: etesync/etesync-dav
    volumes:
      - ./data/etesync-dav:/data
    networks:
      - home
    restart: unless-stopped

    environment:
      ETESYNC_DAV_URL: "http://etesync.local"

    labels:
      - "traefik.enable=true"

      - "traefik.http.services.etesync.loadbalancer.server.port=37358"

      - "traefik.http.routers.etesync.service=etesync"
      - "traefik.http.routers.etesync.rule=Host(`etesync.local`)"

  # Etesync
  mqtt-explorer:
    image: smeagolworms4/mqtt-explorer
    scale: 0
    volumes:
      - ./data/mqtt-explorer:/mqtt-explorer/config
    networks:
      - home
    restart: unless-stopped

    labels:
      - "traefik.enable=true"

      - "traefik.http.services.mqtt-explorer.loadbalancer.server.port=4000"

      - "traefik.http.routers.mqtt-explorer.service=mqtt-explorer"
      - "traefik.http.routers.mqtt-explorer.rule=Host(`mqtt-explorer.local`)"


  ubooquity:
    image: lscr.io/linuxserver/ubooquity:latest
    scale: 0
    container_name: ubooquity
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - MAXMEM=
    volumes:
      - ./data/ubooquity/data:/config
      - ~/Library:/books
    ports:
      - 2203:2203
      - 2202:2202
    restart: unless-stopped
    labels:
      - "traefik.enable=true"

      - "traefik.http.services.ubooquity.loadbalancer.server.port=2202"

      - "traefik.http.routers.ubooquity.service=ubooquity"
      - "traefik.http.routers.ubooquity.rule=Host(`ubooquity.local`)"

  openwebrx:
    image: jketterl/openwebrx:stable
    scale: 0
    networks:
      - home
    devices:
      - /dev/bus/usb
    volumes:
      - ./data/openwebrx/data:/var/lib/openwebrx
    restart: unless-stopped
    labels:
      - "traefik.enable=true"

      - "traefik.http.services.openwebrx.loadbalancer.server.port=8073"

      - "traefik.http.routers.openwebrx.service=openwebrx"
      - "traefik.http.routers.openwebrx.rule=Host(`openwebrx.local`)"

networks:
  home:
    driver: bridge
    ipam:
     config:
       - subnet: 10.5.0.0/16
         gateway: 10.5.0.1
